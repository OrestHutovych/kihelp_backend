package org.example.kihelp_back.global.service;

import org.example.kihelp_back.global.exception.TelegramException;
import org.example.kihelp_back.history.model.History;
import org.example.kihelp_back.support.dto.SupportDto;
import org.example.kihelp_back.transaction.model.Transaction;
import org.example.kihelp_back.user.model.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.example.kihelp_back.global.util.ErrorMessage.TELEGRAM_ERROR;

@Service
public class TelegramBotService extends TelegramLongPollingBot {
    @Value("${telegram.username}")
    private String botUsername;

    @lombok.Getter
    @Value("${telegram.token}")
    private String botToken;

    @Value("${telegram.chatId}")
    private String chatId;

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        throw new UnsupportedOperationException();
    }

    public void depositAdminMessage(Transaction transaction) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);

        String message = String.format("""
                üí∞ *–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*
                ‚Ä¢ *Username:* `@%s`
                ‚Ä¢ *Telegram ID:* `%s`
                ‚Ä¢ *–°—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:* `%s UAH`
            
                üîó *–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*
                ‚Ä¢ *Transaction ID:* `%s`
            
                #deposit
                """,
                transaction.getUser().getUsername(),
                transaction.getUser().getTelegramId(),
                transaction.getAmount(),
                transaction.getTransactionId()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void withdrawAdminMessage(Transaction transaction, String cardNumber) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);

        String message = String.format("""
                üí≥ *–ó–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*
                ‚Ä¢ *Username:* `@%s`
                ‚Ä¢ *Telegram ID:* `%s`
                ‚Ä¢ *–°—É–º–∞:* `%s UAH`
            
                üîó *–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*
                ‚Ä¢ *Transaction ID:* `%s`
                ‚Ä¢ *–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:* `%s`
            
                #withdraw
                """,
                transaction.getUser().getUsername(),
                transaction.getUser().getTelegramId(),
                transaction.getAmount(),
                transaction.getTransactionId(),
                cardNumber
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("–ü—Ä–∏–π–Ω—è—Ç–∏");
        confirmButton.setCallbackData("confirm_withdraw");

        InlineKeyboardButton rejectButton = new InlineKeyboardButton();
        rejectButton.setText("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏");
        rejectButton.setCallbackData("reject_withdraw");

        row.add(confirmButton);
        row.add(rejectButton);

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);

        sendMessage.setReplyMarkup(keyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void supportMessageSentToAdmin(User user, SupportDto supportDto) {
        String message = String.format(
                """
                üöÄ *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*
                 ‚Ä¢ *Username:* `@%s`
                 ‚Ä¢ *Telegram ID:* `%s`
                
                üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:* `%s`
                
                #support
                """,
                user.getUsername(),
                user.getTelegramId(),
                supportDto.message()
        );

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            Message sentMessage = execute(sendMessage);
            int messageId = sentMessage.getMessageId();

            for (MultipartFile file : supportDto.files()) {
                processAndSendFile(chatId, messageId, file);
            }
        } catch (TelegramApiException e) {
            throw new TelegramException(String.format(TELEGRAM_ERROR, e.getMessage()));
        }
    }

    public void warnWithdrawAdminMessage(Transaction transaction) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);

        String message = String.format("""
                üí≥ *–°–ø–ª–∏–≤–≤–∞—î —á–∞—Å –Ω–∞ –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*
                ‚Ä¢ *Username:* `@%s`
                ‚Ä¢ *Telegram ID:* `%s`
                ‚Ä¢ *–°—É–º–∞:* `%s UAH`
            
                üîó *–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*
                ‚Ä¢ *Transaction ID:* `%s`
            
                #warn
                """,
                transaction.getUser().getUsername(),
                transaction.getUser().getTelegramId(),
                transaction.getAmount(),
                transaction.getTransactionId()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void failedWithdrawTransaction(Transaction transaction) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(transaction.getUser().getTelegramId());

        String message = String.format("""
                üí≥ *–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è –≥—Ä–æ—à–µ–π –Ω–µ –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é.*
               
                üîó *–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*
                ‚Ä¢ *Transaction ID:* `%s`
                ‚Ä¢ *–°—É–º–∞:* `%s`
            
                #failed
                """,
                transaction.getTransactionId(),
                transaction.getAmount()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void successWithdrawTransaction(Transaction transaction) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(transaction.getUser().getTelegramId());

        String message = String.format("""
                üí≥ *–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è –≥—Ä–æ—à–µ–π —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π.*
               
                üîó *–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*
                ‚Ä¢ *Transaction ID:* `%s`
                ‚Ä¢ *–°—É–º–∞:* `%s`
            
                #withdraw
                """,
                transaction.getTransactionId(),
                transaction.getAmount()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void failedDepositTransaction(Transaction transaction, String errorMessage) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(transaction.getUser().getTelegramId());

        String message = String.format("""
            üí≥ *–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–µ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ.*
            
            ‚ùå *–ü–æ–º–∏–ª–∫–∞:* %s
            
            #failed
            """, errorMessage
        );


        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void depositUserMessage(Transaction transaction) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(transaction.getUser().getTelegramId());

        String message = String.format("""
                üí∞ *–£—Å–ø—ñ—à–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É*
                ‚Ä¢ *–°—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:* `%s UAH`
            
                üîó *–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*
                ‚Ä¢ *Transaction ID:* `%s`
            
                #deposit
                """,
                transaction.getAmount(),
                transaction.getTransactionId()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void sendMessageToUserChatAboutCompletedTask(History history) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(history.getUser().getTelegramId());

        String message = String.format("""
                üü© *–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–µ —É—Å–ø—ñ—à–Ω–æ!*
        
                üîó *–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:*
                ‚Ä¢ *–ü—Ä–µ–¥–º–µ—Ç:* `%s`
                ‚Ä¢ *–í–∏–∫–ª–∞–¥–∞—á:* `%s`
                ‚Ä¢ *–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:* `%s`
        
                –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤ —Ä–æ–∑–¥—ñ–ª—ñ ¬´–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è¬ª -> ¬´–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–≤–¥–∞–Ω—å¬ª.
        
                #task
                """,
                history.getTask().getTeacher().getSubject().getName(),
                history.getTask().getTeacher().getName(),
                history.getTask().getTitle()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    public void sendToDeveloperChatAboutNewInPendingTask(History history) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(history.getTask().getDeveloper().getTelegramId());

        String message = String.format("""
                üì£ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫—É–ø–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è.*
                ‚Ä¢ *Username:* `@%s`
                ‚Ä¢ *Telegram ID:* `%s`
                
                –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ ¬´–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è¬ª -> ¬´Dev –ø–∞–Ω–µ–ª—å¬ª —Ç–∞ –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—Ä–æ—Ç—è–≥–æ–º 1 –≥–æ–¥–∏–Ω–∏.
        
                #task
                """,
                history.getUser().getUsername(),
                history.getUser().getTelegramId()
        );

        sendMessage.setText(message);
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new TelegramException(
                    String.format(
                            TELEGRAM_ERROR, e.getMessage()
                    )
            );
        }
    }

    private void processAndSendFile(String chatId, int messageId, MultipartFile file) {
        File tempFile = null;
        try {
            tempFile = File.createTempFile("file", file.getOriginalFilename());
            file.transferTo(tempFile);

            InputFile inputFile = new InputFile(tempFile);

            SendDocument sendDocument = new SendDocument();
            sendDocument.setChatId(chatId);
            sendDocument.setDocument(inputFile);
            sendDocument.setReplyToMessageId(messageId);

            execute(sendDocument);
        } catch (IOException | TelegramApiException e) {
            throw new TelegramException(String.format(TELEGRAM_ERROR, e.getMessage()));
        } finally {
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
}
